// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../entities/album.dart';
import '../entities/app_settings.dart';
import '../entities/artist.dart';
import '../entities/audio_settings.dart';
import '../entities/playlist.dart';
import '../entities/song.dart';
import '../entities/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 3921945365618094314),
    name: 'Album',
    lastPropertyId: const obx_int.IdUid(4, 1552121206715217487),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8008877769353065228),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2043868033573180627),
        name: 'duration',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1552121206715217487),
        name: 'name',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(12, 6987198790807708181),
        name: 'songs',
        targetId: const obx_int.IdUid(9, 2699295626262200931),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(7, 5526037696532947142),
    name: 'Artist',
    lastPropertyId: const obx_int.IdUid(3, 4644033625608853417),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3201380740432642262),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7802230679779449148),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4644033625608853417),
        name: 'duration',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(13, 3057606175125707429),
        name: 'songs',
        targetId: const obx_int.IdUid(9, 2699295626262200931),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(8, 1201344405344257820),
    name: 'Playlist',
    lastPropertyId: const obx_int.IdUid(9, 7588506137969260202),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4691891355211211597),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6644121931512947843),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4661921934602843903),
        name: 'nextAdded',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7669097015898493563),
        name: 'indestructible',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 117185013034212461),
        name: 'duration',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 1923441189618914182),
        name: 'artistCount',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 1287232954740870990),
        name: 'pathsInOrder',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 7588506137969260202),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(14, 6857454524084748699),
        name: 'songs',
        targetId: const obx_int.IdUid(9, 2699295626262200931),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(9, 2699295626262200931),
    name: 'Song',
    lastPropertyId: const obx_int.IdUid(22, 6403839440653166736),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7054185390860863460),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 2558946542226868330),
        name: 'duration',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 7871722617691582380),
        name: 'path',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(6, 806406396307151439),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 4170125558652995840),
        name: 'lyricsPath',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 5873471966082808708),
        name: 'trackNumber',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 2642147683439879650),
        name: 'discNumber',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 8923749584445208286),
        name: 'year',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 5060656751054062355),
        name: 'genre',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 4389193532021057245),
        name: 'liked',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 2568041517539697401),
        name: 'lastPlayed',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 888487963298747739),
        name: 'playCount',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 7350517332348346502),
        name: 'trackArtist',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 2515924211132622459),
        name: 'album',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(19, 5779634967563811605),
        name: 'albumArtist',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(20, 2474102906081094611),
        name: 'fullyLoaded',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(21, 3440894697539214704),
        name: 'name',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(13, 5568930893270338793),
    name: 'User',
    lastPropertyId: const obx_int.IdUid(6, 241075470968735771),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6732391997541564817),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2522438004561701861),
        name: 'mongoID',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 242659213517174142),
        name: 'email',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6423775711456970308),
        name: 'password',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3783452981313496459),
        name: 'deviceList',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 241075470968735771),
        name: 'primaryDevice',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(14, 5114729228634645625),
    name: 'AudioSettings',
    lastPropertyId: const obx_int.IdUid(12, 8197816383444370874),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5204428774828611052),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8687295351172524078),
        name: 'userId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(7, 2307687838362842440),
        relationTarget: 'User',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5972672191868384102),
        name: 'index',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2730043010979823964),
        name: 'slider',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7915237372717931527),
        name: 'repeat',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 3511575254212263346),
        name: 'shuffle',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 753782044894144619),
        name: 'balance',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 4966325076389547358),
        name: 'speed',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 496400092518674980),
        name: 'volume',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 773296720584667183),
        name: 'queue',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 8197816383444370874),
        name: 'shuffledQueue',
        type: 30,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(15, 1994788584782755092),
    name: 'AppSettings',
    lastPropertyId: const obx_int.IdUid(13, 5479939245963461385),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 881209341920608018),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 9146436447869122094),
        name: 'userId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(8, 9059945929002866726),
        relationTarget: 'User',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6967192999579555890),
        name: 'firstTime',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 813442943224019053),
        name: 'systemTray',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4427524288222689434),
        name: 'fullClose',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 250223119048497435),
        name: 'appNotifications',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 272815104278839493),
        name: 'gridView',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 2165713424117401281),
        name: 'mainSongPlace',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 2530389220734099795),
        name: 'queueAdd',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 2617477544973385086),
        name: 'queuePlay',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 3538182895143593375),
        name: 'songPlaces',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 2595079915155461670),
        name: 'songPlaceIncludeSubfolders',
        type: 27,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 5479939245963461385),
        name: 'missingSongs',
        type: 30,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(15, 1994788584782755092),
    lastIndexId: const obx_int.IdUid(8, 9059945929002866726),
    lastRelationId: const obx_int.IdUid(14, 6857454524084748699),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [
      1815619076807623967,
      3925805979979484823,
      7335752985882107118,
      7894316662941293306,
      6804076072802197348,
      503840690443594176,
      6472587576565486302,
      8915793717000853896,
    ],
    retiredIndexUids: const [
      8158864303992699484,
      3569144432115425291,
      8329853309849508158,
    ],
    retiredPropertyUids: const [
      8117591938523893765,
      3605978690295634239,
      149915083280863291,
      1171492870719301957,
      3807358697915249101,
      3700143381519926938,
      2984380281557415328,
      1802142995195547451,
      8458091153121794614,
      1345298650327502809,
      8512936839929207505,
      455336560021715696,
      4033493852260689551,
      1494518102450216985,
      6153441952504667348,
      5415571419012464132,
      4890538008718222274,
      6851290111821521417,
      7192996012449545044,
      1081497872397675260,
      4446675160006263163,
      8662021158587083310,
      7701854324956318789,
      4392167652933872417,
      1256214510630179389,
      9216794188712503719,
      6768347857469160534,
      7563905291323881955,
      3811047316129861105,
      5871174133202682144,
      1713442380679213921,
      3238798048305584967,
      5403121951651724452,
      5272121219338655893,
      1343901758836927781,
      1794718733901224482,
      5178715081886201470,
      8710457297108856265,
      46998898595284097,
      8041144671428001314,
      488819351752261664,
      6047951844641597661,
      5365361459618174637,
      2437385579200723056,
      7909410870437474588,
      4177982114420883162,
      4093183126855020448,
      1480984136849824540,
      5217132346410254782,
      467231863241907326,
      8249822133428953560,
      1754679951177592721,
      5747114371564639158,
      1668822660070621182,
      8770041269884286611,
      3216196079984977284,
      497009210266954405,
      9066790932122685542,
      6447994625540678165,
      3769136345788891218,
      292241644251009252,
      2620913899500465255,
      5494903356063044467,
      8011405811957446964,
      6418856442391201285,
      3790165928719475462,
      7574607889062084380,
      8901159581847104341,
      3823209140731058777,
      2065642836963071269,
      1244124621152381401,
      439336784355241781,
      9083043759361059742,
      9214208508844757757,
      4576452952932886277,
      6224184881532105054,
      6826323878830780036,
      5383929731509918153,
      3009404775917456681,
      1123112726686427770,
      7142699174211477144,
      1400008758799964476,
      5980516925629100333,
      711981951336517037,
      2354236299037510562,
      5029085805655454363,
      4285092653831767946,
      5333875856513035498,
      5597339305098729165,
      1700936579540829558,
      5513468073222465258,
      1476688898957426427,
      7028463875379573189,
      1289892183662183853,
      4835205561907832106,
      2884413804244535311,
      1042367229516524114,
      3037993425050862620,
      5653202925440005990,
      7634629781462408867,
      5677993359296696005,
      8915164316000782064,
      6904336426542207883,
      6878565682721075262,
      775602971173592942,
      2861631531689712242,
      260058346512199266,
      2432356436446969888,
      4469018997165856036,
      4907002138093345176,
      5957198935995519125,
      3673481275015516855,
      3616893243046809019,
      9084813934484838119,
      6622180782848634748,
      1238570688105015283,
      199891397808723509,
      5826497150483433027,
      2735878002420503108,
      2581096240953821693,
      5363372071067633180,
      5517598247784657980,
      910257887626389773,
      2752750709576868831,
      2686885678487302492,
      1293669422185756488,
      6403839440653166736,
    ],
    retiredRelationUids: const [
      3440552932794375637,
      1720330414801572415,
      9083558736264320545,
      7147607332865342830,
      6499065376015162843,
      6493066416012044662,
      3693720394146836893,
      6294802571898725432,
      2238981983127665463,
    ],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Album: obx_int.EntityDefinition<Album>(
      model: _entities[0],
      toOneRelations: (Album object) => [],
      toManyRelations: (Album object) => {
        obx_int.RelInfo<Album>.toMany(12, object.id): object.songs,
      },
      getId: (Album object) => object.id,
      setId: (Album object, int id) {
        object.id = id;
      },
      objectToFB: (Album object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addInt64(2, object.duration);
        fbb.addOffset(3, nameOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = Album()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..duration = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            8,
            0,
          )
          ..name = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 10, '');
        obx_int.InternalToManyAccess.setRelInfo<Album>(
          object.songs,
          store,
          obx_int.RelInfo<Album>.toMany(12, object.id),
        );
        return object;
      },
    ),
    Artist: obx_int.EntityDefinition<Artist>(
      model: _entities[1],
      toOneRelations: (Artist object) => [],
      toManyRelations: (Artist object) => {
        obx_int.RelInfo<Artist>.toMany(13, object.id): object.songs,
      },
      getId: (Artist object) => object.id,
      setId: (Artist object, int id) {
        object.id = id;
      },
      objectToFB: (Artist object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addInt64(2, object.duration);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = Artist()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..name = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 6, '')
          ..duration = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            8,
            0,
          );
        obx_int.InternalToManyAccess.setRelInfo<Artist>(
          object.songs,
          store,
          obx_int.RelInfo<Artist>.toMany(13, object.id),
        );
        return object;
      },
    ),
    Playlist: obx_int.EntityDefinition<Playlist>(
      model: _entities[2],
      toOneRelations: (Playlist object) => [],
      toManyRelations: (Playlist object) => {
        obx_int.RelInfo<Playlist>.toMany(14, object.id): object.songs,
      },
      getId: (Playlist object) => object.id,
      setId: (Playlist object, int id) {
        object.id = id;
      },
      objectToFB: (Playlist object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final nextAddedOffset = fbb.writeString(object.nextAdded);
        final artistCountOffset = fbb.writeList(
          object.artistCount.map(fbb.writeString).toList(growable: false),
        );
        final pathsInOrderOffset = fbb.writeList(
          object.pathsInOrder.map(fbb.writeString).toList(growable: false),
        );
        fbb.startTable(10);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, nextAddedOffset);
        fbb.addBool(4, object.indestructible);
        fbb.addInt64(5, object.duration);
        fbb.addOffset(6, artistCountOffset);
        fbb.addOffset(7, pathsInOrderOffset);
        fbb.addInt64(8, object.createdAt.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = Playlist()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..name = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 6, '')
          ..nextAdded = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 8, '')
          ..indestructible = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            12,
            false,
          )
          ..duration = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            14,
            0,
          )
          ..artistCount = const fb.ListReader<String>(
            fb.StringReader(asciiOptimization: true),
            lazy: false,
          ).vTableGet(buffer, rootOffset, 16, [])
          ..pathsInOrder = const fb.ListReader<String>(
            fb.StringReader(asciiOptimization: true),
            lazy: false,
          ).vTableGet(buffer, rootOffset, 18, [])
          ..createdAt = DateTime.fromMillisecondsSinceEpoch(
            const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0),
          );
        obx_int.InternalToManyAccess.setRelInfo<Playlist>(
          object.songs,
          store,
          obx_int.RelInfo<Playlist>.toMany(14, object.id),
        );
        return object;
      },
    ),
    Song: obx_int.EntityDefinition<Song>(
      model: _entities[3],
      toOneRelations: (Song object) => [],
      toManyRelations: (Song object) => {},
      getId: (Song object) => object.id,
      setId: (Song object, int id) {
        object.id = id;
      },
      objectToFB: (Song object, fb.Builder fbb) {
        final pathOffset = fbb.writeString(object.path);
        final lyricsPathOffset = fbb.writeString(object.lyricsPath);
        final genreOffset = fbb.writeString(object.genre);
        final trackArtistOffset = fbb.writeString(object.trackArtist);
        final albumOffset = fbb.writeString(object.album);
        final albumArtistOffset = fbb.writeString(object.albumArtist);
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(23);
        fbb.addInt64(0, object.id);
        fbb.addInt64(5, object.duration);
        fbb.addOffset(6, pathOffset);
        fbb.addOffset(7, lyricsPathOffset);
        fbb.addInt64(8, object.trackNumber);
        fbb.addInt64(9, object.discNumber);
        fbb.addInt64(10, object.year);
        fbb.addOffset(11, genreOffset);
        fbb.addBool(12, object.liked);
        fbb.addInt64(13, object.lastPlayed?.millisecondsSinceEpoch);
        fbb.addInt64(14, object.playCount);
        fbb.addOffset(16, trackArtistOffset);
        fbb.addOffset(17, albumOffset);
        fbb.addOffset(18, albumArtistOffset);
        fbb.addBool(19, object.fullyLoaded);
        fbb.addOffset(20, nameOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final lastPlayedValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          30,
        );
        final object = Song()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..duration = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            14,
            0,
          )
          ..path = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 16, '')
          ..lyricsPath = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 18, '')
          ..trackNumber = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            20,
            0,
          )
          ..discNumber = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            22,
            0,
          )
          ..year = const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0)
          ..genre = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 26, '')
          ..liked = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            28,
            false,
          )
          ..lastPlayed = lastPlayedValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(lastPlayedValue)
          ..playCount = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            32,
            0,
          )
          ..trackArtist = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 36, '')
          ..album = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 38, '')
          ..albumArtist = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 40, '')
          ..fullyLoaded = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            42,
            false,
          )
          ..name = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 44, '');

        return object;
      },
    ),
    User: obx_int.EntityDefinition<User>(
      model: _entities[4],
      toOneRelations: (User object) => [],
      toManyRelations: (User object) => {},
      getId: (User object) => object.id,
      setId: (User object, int id) {
        object.id = id;
      },
      objectToFB: (User object, fb.Builder fbb) {
        final mongoIDOffset = fbb.writeString(object.mongoID);
        final emailOffset = fbb.writeString(object.email);
        final passwordOffset = fbb.writeString(object.password);
        final deviceListOffset = fbb.writeList(
          object.deviceList.map(fbb.writeString).toList(growable: false),
        );
        final primaryDeviceOffset = fbb.writeString(object.primaryDevice);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, mongoIDOffset);
        fbb.addOffset(2, emailOffset);
        fbb.addOffset(3, passwordOffset);
        fbb.addOffset(4, deviceListOffset);
        fbb.addOffset(5, primaryDeviceOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = User()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..mongoID = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 6, '')
          ..email = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 8, '')
          ..password = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 10, '')
          ..deviceList = const fb.ListReader<String>(
            fb.StringReader(asciiOptimization: true),
            lazy: false,
          ).vTableGet(buffer, rootOffset, 12, [])
          ..primaryDevice = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 14, '');

        return object;
      },
    ),
    AudioSettings: obx_int.EntityDefinition<AudioSettings>(
      model: _entities[5],
      toOneRelations: (AudioSettings object) => [object.user],
      toManyRelations: (AudioSettings object) => {},
      getId: (AudioSettings object) => object.id,
      setId: (AudioSettings object, int id) {
        object.id = id;
      },
      objectToFB: (AudioSettings object, fb.Builder fbb) {
        final queueOffset = fbb.writeList(
          object.queue.map(fbb.writeString).toList(growable: false),
        );
        final shuffledQueueOffset = fbb.writeList(
          object.shuffledQueue.map(fbb.writeString).toList(growable: false),
        );
        fbb.startTable(13);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.user.targetId);
        fbb.addInt64(2, object.index);
        fbb.addInt64(3, object.slider);
        fbb.addBool(5, object.repeat);
        fbb.addBool(6, object.shuffle);
        fbb.addFloat64(7, object.balance);
        fbb.addFloat64(8, object.speed);
        fbb.addFloat64(9, object.volume);
        fbb.addOffset(10, queueOffset);
        fbb.addOffset(11, shuffledQueueOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = AudioSettings()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..index = const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
          ..slider = const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
          ..repeat = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            14,
            false,
          )
          ..shuffle = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            16,
            false,
          )
          ..balance = const fb.Float64Reader().vTableGet(
            buffer,
            rootOffset,
            18,
            0,
          )
          ..speed = const fb.Float64Reader().vTableGet(
            buffer,
            rootOffset,
            20,
            0,
          )
          ..volume = const fb.Float64Reader().vTableGet(
            buffer,
            rootOffset,
            22,
            0,
          )
          ..queue = const fb.ListReader<String>(
            fb.StringReader(asciiOptimization: true),
            lazy: false,
          ).vTableGet(buffer, rootOffset, 24, [])
          ..shuffledQueue = const fb.ListReader<String>(
            fb.StringReader(asciiOptimization: true),
            lazy: false,
          ).vTableGet(buffer, rootOffset, 26, []);
        object.user.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        object.user.attach(store);
        return object;
      },
    ),
    AppSettings: obx_int.EntityDefinition<AppSettings>(
      model: _entities[6],
      toOneRelations: (AppSettings object) => [object.user],
      toManyRelations: (AppSettings object) => {},
      getId: (AppSettings object) => object.id,
      setId: (AppSettings object, int id) {
        object.id = id;
      },
      objectToFB: (AppSettings object, fb.Builder fbb) {
        final mainSongPlaceOffset = fbb.writeString(object.mainSongPlace);
        final queueAddOffset = fbb.writeString(object.queueAdd);
        final queuePlayOffset = fbb.writeString(object.queuePlay);
        final songPlacesOffset = fbb.writeList(
          object.songPlaces.map(fbb.writeString).toList(growable: false),
        );
        final songPlaceIncludeSubfoldersOffset = fbb.writeListInt64(
          object.songPlaceIncludeSubfolders,
        );
        final missingSongsOffset = fbb.writeList(
          object.missingSongs.map(fbb.writeString).toList(growable: false),
        );
        fbb.startTable(14);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.user.targetId);
        fbb.addBool(2, object.firstTime);
        fbb.addBool(3, object.systemTray);
        fbb.addBool(4, object.fullClose);
        fbb.addBool(5, object.appNotifications);
        fbb.addBool(6, object.gridView);
        fbb.addOffset(7, mainSongPlaceOffset);
        fbb.addOffset(8, queueAddOffset);
        fbb.addOffset(9, queuePlayOffset);
        fbb.addOffset(10, songPlacesOffset);
        fbb.addOffset(11, songPlaceIncludeSubfoldersOffset);
        fbb.addOffset(12, missingSongsOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = AppSettings()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..firstTime = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            8,
            false,
          )
          ..systemTray = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            10,
            false,
          )
          ..fullClose = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            12,
            false,
          )
          ..appNotifications = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            14,
            false,
          )
          ..gridView = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            16,
            false,
          )
          ..mainSongPlace = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 18, '')
          ..queueAdd = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 20, '')
          ..queuePlay = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 22, '')
          ..songPlaces = const fb.ListReader<String>(
            fb.StringReader(asciiOptimization: true),
            lazy: false,
          ).vTableGet(buffer, rootOffset, 24, [])
          ..songPlaceIncludeSubfolders = const fb.ListReader<int>(
            fb.Int64Reader(),
            lazy: false,
          ).vTableGet(buffer, rootOffset, 26, [])
          ..missingSongs = const fb.ListReader<String>(
            fb.StringReader(asciiOptimization: true),
            lazy: false,
          ).vTableGet(buffer, rootOffset, 28, []);
        object.user.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        object.user.attach(store);
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Album] entity fields to define ObjectBox queries.
class Album_ {
  /// See [Album.id].
  static final id = obx.QueryIntegerProperty<Album>(_entities[0].properties[0]);

  /// See [Album.duration].
  static final duration = obx.QueryIntegerProperty<Album>(
    _entities[0].properties[1],
  );

  /// See [Album.name].
  static final name = obx.QueryStringProperty<Album>(
    _entities[0].properties[2],
  );

  /// see [Album.songs]
  static final songs = obx.QueryRelationToMany<Album, Song>(
    _entities[0].relations[0],
  );
}

/// [Artist] entity fields to define ObjectBox queries.
class Artist_ {
  /// See [Artist.id].
  static final id = obx.QueryIntegerProperty<Artist>(
    _entities[1].properties[0],
  );

  /// See [Artist.name].
  static final name = obx.QueryStringProperty<Artist>(
    _entities[1].properties[1],
  );

  /// See [Artist.duration].
  static final duration = obx.QueryIntegerProperty<Artist>(
    _entities[1].properties[2],
  );

  /// see [Artist.songs]
  static final songs = obx.QueryRelationToMany<Artist, Song>(
    _entities[1].relations[0],
  );
}

/// [Playlist] entity fields to define ObjectBox queries.
class Playlist_ {
  /// See [Playlist.id].
  static final id = obx.QueryIntegerProperty<Playlist>(
    _entities[2].properties[0],
  );

  /// See [Playlist.name].
  static final name = obx.QueryStringProperty<Playlist>(
    _entities[2].properties[1],
  );

  /// See [Playlist.nextAdded].
  static final nextAdded = obx.QueryStringProperty<Playlist>(
    _entities[2].properties[2],
  );

  /// See [Playlist.indestructible].
  static final indestructible = obx.QueryBooleanProperty<Playlist>(
    _entities[2].properties[3],
  );

  /// See [Playlist.duration].
  static final duration = obx.QueryIntegerProperty<Playlist>(
    _entities[2].properties[4],
  );

  /// See [Playlist.artistCount].
  static final artistCount = obx.QueryStringVectorProperty<Playlist>(
    _entities[2].properties[5],
  );

  /// See [Playlist.pathsInOrder].
  static final pathsInOrder = obx.QueryStringVectorProperty<Playlist>(
    _entities[2].properties[6],
  );

  /// See [Playlist.createdAt].
  static final createdAt = obx.QueryDateProperty<Playlist>(
    _entities[2].properties[7],
  );

  /// see [Playlist.songs]
  static final songs = obx.QueryRelationToMany<Playlist, Song>(
    _entities[2].relations[0],
  );
}

/// [Song] entity fields to define ObjectBox queries.
class Song_ {
  /// See [Song.id].
  static final id = obx.QueryIntegerProperty<Song>(_entities[3].properties[0]);

  /// See [Song.duration].
  static final duration = obx.QueryIntegerProperty<Song>(
    _entities[3].properties[1],
  );

  /// See [Song.path].
  static final path = obx.QueryStringProperty<Song>(_entities[3].properties[2]);

  /// See [Song.lyricsPath].
  static final lyricsPath = obx.QueryStringProperty<Song>(
    _entities[3].properties[3],
  );

  /// See [Song.trackNumber].
  static final trackNumber = obx.QueryIntegerProperty<Song>(
    _entities[3].properties[4],
  );

  /// See [Song.discNumber].
  static final discNumber = obx.QueryIntegerProperty<Song>(
    _entities[3].properties[5],
  );

  /// See [Song.year].
  static final year = obx.QueryIntegerProperty<Song>(
    _entities[3].properties[6],
  );

  /// See [Song.genre].
  static final genre = obx.QueryStringProperty<Song>(
    _entities[3].properties[7],
  );

  /// See [Song.liked].
  static final liked = obx.QueryBooleanProperty<Song>(
    _entities[3].properties[8],
  );

  /// See [Song.lastPlayed].
  static final lastPlayed = obx.QueryDateProperty<Song>(
    _entities[3].properties[9],
  );

  /// See [Song.playCount].
  static final playCount = obx.QueryIntegerProperty<Song>(
    _entities[3].properties[10],
  );

  /// See [Song.trackArtist].
  static final trackArtist = obx.QueryStringProperty<Song>(
    _entities[3].properties[11],
  );

  /// See [Song.album].
  static final album = obx.QueryStringProperty<Song>(
    _entities[3].properties[12],
  );

  /// See [Song.albumArtist].
  static final albumArtist = obx.QueryStringProperty<Song>(
    _entities[3].properties[13],
  );

  /// See [Song.fullyLoaded].
  static final fullyLoaded = obx.QueryBooleanProperty<Song>(
    _entities[3].properties[14],
  );

  /// See [Song.name].
  static final name = obx.QueryStringProperty<Song>(
    _entities[3].properties[15],
  );
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[4].properties[0]);

  /// See [User.mongoID].
  static final mongoID = obx.QueryStringProperty<User>(
    _entities[4].properties[1],
  );

  /// See [User.email].
  static final email = obx.QueryStringProperty<User>(
    _entities[4].properties[2],
  );

  /// See [User.password].
  static final password = obx.QueryStringProperty<User>(
    _entities[4].properties[3],
  );

  /// See [User.deviceList].
  static final deviceList = obx.QueryStringVectorProperty<User>(
    _entities[4].properties[4],
  );

  /// See [User.primaryDevice].
  static final primaryDevice = obx.QueryStringProperty<User>(
    _entities[4].properties[5],
  );
}

/// [AudioSettings] entity fields to define ObjectBox queries.
class AudioSettings_ {
  /// See [AudioSettings.id].
  static final id = obx.QueryIntegerProperty<AudioSettings>(
    _entities[5].properties[0],
  );

  /// See [AudioSettings.user].
  static final user = obx.QueryRelationToOne<AudioSettings, User>(
    _entities[5].properties[1],
  );

  /// See [AudioSettings.index].
  static final index = obx.QueryIntegerProperty<AudioSettings>(
    _entities[5].properties[2],
  );

  /// See [AudioSettings.slider].
  static final slider = obx.QueryIntegerProperty<AudioSettings>(
    _entities[5].properties[3],
  );

  /// See [AudioSettings.repeat].
  static final repeat = obx.QueryBooleanProperty<AudioSettings>(
    _entities[5].properties[4],
  );

  /// See [AudioSettings.shuffle].
  static final shuffle = obx.QueryBooleanProperty<AudioSettings>(
    _entities[5].properties[5],
  );

  /// See [AudioSettings.balance].
  static final balance = obx.QueryDoubleProperty<AudioSettings>(
    _entities[5].properties[6],
  );

  /// See [AudioSettings.speed].
  static final speed = obx.QueryDoubleProperty<AudioSettings>(
    _entities[5].properties[7],
  );

  /// See [AudioSettings.volume].
  static final volume = obx.QueryDoubleProperty<AudioSettings>(
    _entities[5].properties[8],
  );

  /// See [AudioSettings.queue].
  static final queue = obx.QueryStringVectorProperty<AudioSettings>(
    _entities[5].properties[9],
  );

  /// See [AudioSettings.shuffledQueue].
  static final shuffledQueue = obx.QueryStringVectorProperty<AudioSettings>(
    _entities[5].properties[10],
  );
}

/// [AppSettings] entity fields to define ObjectBox queries.
class AppSettings_ {
  /// See [AppSettings.id].
  static final id = obx.QueryIntegerProperty<AppSettings>(
    _entities[6].properties[0],
  );

  /// See [AppSettings.user].
  static final user = obx.QueryRelationToOne<AppSettings, User>(
    _entities[6].properties[1],
  );

  /// See [AppSettings.firstTime].
  static final firstTime = obx.QueryBooleanProperty<AppSettings>(
    _entities[6].properties[2],
  );

  /// See [AppSettings.systemTray].
  static final systemTray = obx.QueryBooleanProperty<AppSettings>(
    _entities[6].properties[3],
  );

  /// See [AppSettings.fullClose].
  static final fullClose = obx.QueryBooleanProperty<AppSettings>(
    _entities[6].properties[4],
  );

  /// See [AppSettings.appNotifications].
  static final appNotifications = obx.QueryBooleanProperty<AppSettings>(
    _entities[6].properties[5],
  );

  /// See [AppSettings.gridView].
  static final gridView = obx.QueryBooleanProperty<AppSettings>(
    _entities[6].properties[6],
  );

  /// See [AppSettings.mainSongPlace].
  static final mainSongPlace = obx.QueryStringProperty<AppSettings>(
    _entities[6].properties[7],
  );

  /// See [AppSettings.queueAdd].
  static final queueAdd = obx.QueryStringProperty<AppSettings>(
    _entities[6].properties[8],
  );

  /// See [AppSettings.queuePlay].
  static final queuePlay = obx.QueryStringProperty<AppSettings>(
    _entities[6].properties[9],
  );

  /// See [AppSettings.songPlaces].
  static final songPlaces = obx.QueryStringVectorProperty<AppSettings>(
    _entities[6].properties[10],
  );

  /// See [AppSettings.songPlaceIncludeSubfolders].
  static final songPlaceIncludeSubfolders =
      obx.QueryIntegerVectorProperty<AppSettings>(_entities[6].properties[11]);

  /// See [AppSettings.missingSongs].
  static final missingSongs = obx.QueryStringVectorProperty<AppSettings>(
    _entities[6].properties[12],
  );
}
